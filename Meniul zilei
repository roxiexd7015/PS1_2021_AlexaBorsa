#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C LCD(0x27, 16, 2);//Adresa I2C, coloane, linii
#define BUTTON_OK 13
#define BUTTON_CANCEL 8
#define BUTTON_PREV 7
#define BUTTON_NEXT 12

enum Buttons {
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus {
  MENU_MAIN = 0,
  MENU_KP,
  MENU_KI,
  MENU_KD,
  MENU_TEMP,
  MENU_MAX_NUM
};

double temp = 36.6;
double kp = 20;
double ki=10;
double kd=15;
float temp_q = 0;
Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void print_menu(enum Menus menu)
{
  
  LCD.clear();
  switch(menu)
  {
    case MENU_KP:
      LCD.print("KP = ");
      LCD.print(kp);
      break;
    case MENU_KI:
      LCD.print("KI = ");
      LCD.print(ki);
      break;
    case MENU_KD:
      LCD.print("Kd = ");
      LCD.print(kd);
      break;
    case MENU_TEMP:
      LCD.print("TEMP = ");
      LCD.print(temp);
      break;
    case MENU_MAIN:
    default:
      LCD.print("PS 2020");
      break;
  }

  if(current_menu != MENU_MAIN)
  {
      LCD.setCursor(0,1);
    LCD.print("modifica");
  }
}

void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void save_kp(void)
{
}
void save_ki(void)
{
}
void save_kd(void)
{
}
void inc_kp(void)
{
  kp++;
}
void inc_ki(void)
{
  ki++;
}
void inc_kd(void)
{
  kd++;
}


void dec_kp(void)
{
  kp--;
}
void dec_ki(void)
{
  ki--;
}
void dec_kd(void)
{
  kd--;
}

void save_temp(void)
{
}

void inc_temp(void)
{
  temp++;
}

void dec_temp(void)
{
  temp--;
}


state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {go_home, go_home, inc_kp, dec_kp},       // MENU_KP
  {go_home, go_home,inc_ki,dec_ki},       // MENU_Ki
  {go_home, go_home,inc_kd,dec_kd},       // MENU_Kd
  {go_home, go_home, inc_temp, dec_temp},   // MENU_TEMP
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (!digitalRead(BUTTON_OK))
  {
    ret_val = EV_OK;
  }
  else if (!digitalRead(BUTTON_CANCEL))
  {
    ret_val = EV_CANCEL;
  }
  else if (!digitalRead(BUTTON_NEXT))
  {
    ret_val = EV_NEXT;
  }
  else if (!digitalRead(BUTTON_PREV))
  {
    ret_val = EV_PREV;
  }
  Serial.println(ret_val);
  return ret_val;
}

void setup()
{
   LCD.init();
  LCD.backlight();
  Serial.begin(9600);
  pinMode(13, INPUT_PULLUP);
 // digitalWrite(13, LOW); // pull-down
    pinMode(8, INPUT_PULLUP);
 // digitalWrite(8, LOW); // pull-down
    pinMode(7, INPUT_PULLUP);
 // digitalWrite(7, LOW); // pull-down
    pinMode(12, INPUT_PULLUP);
//  digitalWrite(12, LOW); // pull-down
}

void loop()
{
  volatile Buttons event = GetButtons();
  if (event != EV_NONE)
  {
    state_machine(current_menu, event);
  }
    print_menu(scroll_menu);
    delay(1000);
}
